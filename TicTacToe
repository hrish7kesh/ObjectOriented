import java.util.Scanner;

class TicTacToe {
    private char[][] board;
    private char currentPlayer;
    private int boardSize;
    private String player1Name;
    private String player2Name;

    public TicTacToe(int size, String player1, String player2) {
        boardSize = size;
        board = new char[boardSize][boardSize];
        currentPlayer = 'X';
        player1Name = player1;
        player2Name = player2;
        initializeBoard();
    }

    private void initializeBoard() {
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                board[i][j] = '-';
            }
        }
    }

    public void printBoard() {
        System.out.println("-------------");
        for (int i = 0; i < boardSize; i++) {
            System.out.print("| ");
            for (int j = 0; j < boardSize; j++) {
                System.out.print(board[i][j] + " | ");
            }
            System.out.println();
            System.out.println("-------------");
        }
    }

    public boolean isBoardFull() {
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                if (board[i][j] == '-') {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean makeMove(int row, int col) {
        if (row >= 0 && row < boardSize && col >= 0 && col < boardSize && board[row][col] == '-') {
            board[row][col] = currentPlayer;
            return true;
        }
        return false;
    }

    public boolean checkWin() {
        return (checkRows() || checkColumns() || checkDiagonals());
    }

    private boolean checkRows() {
        for (int i = 0; i < boardSize; i++) {
            if (checkRowCol(board[i][0], board[i][1], board[i][2])) {
                return true;
            }
        }
        return false;
    }

    private boolean checkColumns() {
        for (int i = 0; i < boardSize; i++) {
            if (checkRowCol(board[0][i], board[1][i], board[2][i])) {
                return true;
            }
        }
        return false;
    }

    private boolean checkDiagonals() {
        return (checkRowCol(board[0][0], board[1][1], board[2][2]) || checkRowCol(board[0][2], board[1][1], board[2][0]));
    }

    private boolean checkRowCol(char c1, char c2, char c3) {
        return (c1 != '-' && c1 == c2 && c2 == c3);
    }

    public void switchPlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    public char getCurrentPlayerSymbol() {
        return currentPlayer;
    }

    public String getCurrentPlayerName() {
        return (currentPlayer == 'X') ? player1Name : player2Name;
    }
}

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Welcome to Tic-Tac-Toe!");
        System.out.print("Enter the size of the board (minimum 3): ");
        int size = scanner.nextInt();

        System.out.print("Enter Player 1's name: ");
        String player1Name = scanner.next();
        System.out.print("Enter Player 2's name: ");
        String player2Name = scanner.next();

        TicTacToe game = new TicTacToe(size, player1Name, player2Name);

        while (!game.isBoardFull() && !game.checkWin()) {
            System.out.println("Current board:");
            game.printBoard();
            System.out.println("Player " + game.getCurrentPlayerName() + "'s turn (" + game.getCurrentPlayerSymbol() + "). Enter row (0-" + (size - 1) + ") and column (0-" + (size - 1) + "):");
            int row = scanner.nextInt();
            int col = scanner.nextInt();

            if (game.makeMove(row, col)) {
                if (game.checkWin()) {
                    System.out.println("Congratulations, " + game.getCurrentPlayerName() + "! You win!");
                } else if (game.isBoardFull()) {
                    System.out.println("It's a draw!");
                } else {
                    game.switchPlayer();
                }
            } else {
                System.out.println("Invalid move. Try again.");
            }
        }
        scanner.close();
    }
}


